OBJ =  sparse.o wt_aux.o math_lib.o symmetry.o readHmnR.o inverse.o proteus.o \
       eigen.o ham_qlayer2qlayer.o psi.o unfolding.o rand.o \
  		 ham_slab.o ham_bulk.o ek_slab.o ek_bulk_polar.o ek_bulk.o \
       readinput.o fermisurface.o surfgreen.o surfstat.o \
  		 mat_mul.o ham_ribbon.o ek_ribbon.o \
       fermiarc.o berrycurvature.o \
  		 wanniercenter.o dos.o  orbital_momenta.o \
  		 landau_level_sparse.o landau_level.o lanczos_sparse.o \
		 berry.o wanniercenter_adaptive.o \
  		 effective_mass.o findnodes.o \
		 sigma_OHE.o sigma.o Boltz_transport_anomalous.o\
       main.o
CUDA_OBJ =  cuda_math.o

# compiler
#F90  = nvfortran -Mpreprocess -pg -traceback
#F90  = nvfortran -Mpreprocess -DINTELMKL -pg -traceback
F90  = nvfortran -cuda  -Mpreprocess -DCUDA -pg -traceback

# MKLROOT=/home/quan/intel/oneapi/mkl/2022.2.0
INCLUDE = -I${MKLROOT}/include
WFLAG = 
OFLAG = -O3
FFLAG = $(OFLAG) $(WFLAG) -DINTELMKL
LFLAG = $(OFLAG)

# blas and lapack libraries
# static linking
#LIBS = -Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_intel_lp64.a \
        ${MKLROOT}/lib/intel64/libmkl_sequential.a \
        ${MKLROOT}/lib/intel64/libmkl_core.a -Wl,--end-group -lpthread -lm -ldl \
		  ${ARPACK}

# dynamic linking
ARPACK=-L/root/wannier/arpack/lib -larpack
CUDA_LIB=-L/opt/nvidia/hpc_sdk/Linux_x86_64/24.3/math_libs/lib64 -lcuda -cudalib=cusparse,cublas,cusolver
LIBS = ${ARPACK} -L/${MKLROOT}/lib/intel64 -lmkl_core -lmkl_sequential -lmkl_intel_lp64 -lpthread \
		 ${CUDA_LIB}
 
main : module.o cuda_module.o $(OBJ) $(CUDA_OBJ)  
	$(F90) $(LFLAG)  module.o cuda_module.o $(OBJ) $(CUDA_OBJ) -o wt.x $(LIBS)
	cp -f wt.x ../bin

.SUFFIXES: .o .f90

.f90.o :
	$(F90) $(FFLAG) $(INCLUDE) -c $*.f90

cuda_module.o :
	nvfortran  -pg -cuda -cudalib=cusparse,cublas,cusolver -Mpreprocess -C -traceback -c cuda_module.f90
cuda_math.o :
	nvfortran  -pg -cuda -cudalib=cusparse,cublas,cusolver -Mpreprocess -C -traceback -c cuda_math.f90

clean :
	rm -f *.o *.mod *~ wt.x


